name: Supabase Database Migration Pipeline
permissions:
  contents: read

on:
  # Run on pushes to main branch only (direct commits)
  push:
    branches: [main]
  # Run on all PRs (this covers validation before merge)
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  # Check if migration-related files were changed
  check-changes:
    name: Check for Migration Changes
    runs-on: ubuntu-latest
    outputs:
      migrations-changed: ${{ steps.changes.outputs.migrations }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Check for changes
        id: changes
        run: |
          # Check if any migration-related files were changed
          if git diff --name-only ${{ github.event.before }}..${{ github.sha }} | grep -E "(ufa/services/transactional-supabase-foobar/database/supabase/migrations/|ufa/services/transactional-supabase-foobar/src/database/schema.ts)"; then
            echo "migrations=true" >> $GITHUB_OUTPUT
          else
            echo "migrations=false" >> $GITHUB_OUTPUT
          fi

  validate-migrations:
    name: Validate Database Migrations
    runs-on: ubuntu-latest
    needs: check-changes
    if: needs.check-changes.outputs.migrations-changed == 'true'
    defaults:
      run:
        working-directory: ufa/services/transactional-supabase-foobar

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: 2.31.8

      - name: Link to Supabase project
        run: |
          echo "üîó Linking to Supabase project..."
          cd database/supabase
          supabase link --project-ref "$PROJECT_REF"
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
          PROJECT_REF: ${{ secrets.SUPABASE_PROJECT_REF }}

      - name: Validate migrations (dry run)
        run: |
          echo "üß™ Testing migrations against production database (dry run)..."
          cd database/supabase
          supabase db push --dry-run
          echo "‚úÖ Migration validation successful - ready for deployment"
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}

  deploy-migrations:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [check-changes, validate-migrations]
    if: github.ref == 'refs/heads/main' && needs.check-changes.outputs.migrations-changed == 'true'
    defaults:
      run:
        working-directory: ufa/services/transactional-supabase-foobar

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: 2.31.8

      - name: Link to Supabase project
        run: |
          echo "üîó Linking to Supabase project..."
          cd database/supabase
          supabase link --project-ref "$PROJECT_REF"
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
          PROJECT_REF: ${{ secrets.SUPABASE_PROJECT_REF }}

      - name: Deploy migrations to production
        run: |
          echo "üöÄ Deploying migrations to production database..."
          cd database/supabase
          supabase db push
          echo "‚úÖ Migrations successfully deployed to production!"
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}

  # Gate job that always runs - use this for branch protection
  migration-gate:
    name: Migration Gate
    runs-on: ubuntu-latest
    needs: [check-changes, validate-migrations, deploy-migrations]
    if: always()
    steps:
      - name: Check migration results
        run: |
          if [[ "${{ needs.check-changes.outputs.migrations-changed }}" == "false" ]]; then
            echo "‚úÖ No migration changes detected - skipping migration jobs"
            exit 0
          elif [[ "${{ needs.validate-migrations.result }}" == "success" ]]; then
            echo "‚úÖ Migration validation passed"
            if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
              if [[ "${{ needs.deploy-migrations.result }}" == "success" ]]; then
                echo "‚úÖ Migration deployment successful"
                exit 0
              else
                echo "‚ùå Migration deployment failed"
                exit 1
              fi
            else
              echo "‚úÖ Validation complete (deployment skipped - not main branch)"
              exit 0
            fi
          else
            echo "‚ùå Migration validation failed"
            exit 1
          fi
